{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getDayStart, getDayEnd } from '@wojtekmaj/date-utils';\nimport Tile from '../Tile.js';\nimport { isWeekend } from '../shared/dates.js';\nimport { formatDay as defaultFormatDay, formatLongDate as defaultFormatLongDate } from '../shared/dateFormatter.js';\nvar className = 'react-calendar__month-view__days__day';\nexport default function Day(_a) {\n  var calendarType = _a.calendarType,\n    _b = _a.classes,\n    classes = _b === void 0 ? [] : _b,\n    currentMonthIndex = _a.currentMonthIndex,\n    _c = _a.formatDay,\n    formatDay = _c === void 0 ? defaultFormatDay : _c,\n    _d = _a.formatLongDate,\n    formatLongDate = _d === void 0 ? defaultFormatLongDate : _d,\n    otherProps = __rest(_a, [\"calendarType\", \"classes\", \"currentMonthIndex\", \"formatDay\", \"formatLongDate\"]);\n  var date = otherProps.date,\n    locale = otherProps.locale;\n  var classesProps = [];\n  if (classes) {\n    classesProps.push.apply(classesProps, classes);\n  }\n  if (className) {\n    classesProps.push(className);\n  }\n  if (isWeekend(date, calendarType)) {\n    classesProps.push(\"\".concat(className, \"--weekend\"));\n  }\n  if (date.getMonth() !== currentMonthIndex) {\n    classesProps.push(\"\".concat(className, \"--neighboringMonth\"));\n  }\n  return _jsx(Tile, __assign({}, otherProps, {\n    classes: classesProps,\n    formatAbbr: formatLongDate,\n    maxDateTransform: getDayEnd,\n    minDateTransform: getDayStart,\n    view: \"month\",\n    children: formatDay(locale, date)\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}