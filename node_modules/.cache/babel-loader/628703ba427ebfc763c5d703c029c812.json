{"ast":null,"code":"import mem from 'mem';\nfunction isString(el) {\n  return typeof el === 'string';\n}\nfunction isUnique(el, index, arr) {\n  return arr.indexOf(el) === index;\n}\nfunction isAllLowerCase(el) {\n  return el.toLowerCase() === el;\n}\nfunction fixCommas(el) {\n  return el.indexOf(',') === -1 ? el : el.split(',');\n}\nfunction normalizeLocale(locale) {\n  if (!locale) {\n    return locale;\n  }\n  if (locale === 'C' || locale === 'posix' || locale === 'POSIX') {\n    return 'en-US';\n  }\n  // If there's a dot (.) in the locale, it's likely in the format of \"en-US.UTF-8\", so we only take the first part\n  if (locale.indexOf('.') !== -1) {\n    var _a = locale.split('.')[0],\n      actualLocale = _a === void 0 ? '' : _a;\n    return normalizeLocale(actualLocale);\n  }\n  // If there's an at sign (@) in the locale, it's likely in the format of \"en-US@posix\", so we only take the first part\n  if (locale.indexOf('@') !== -1) {\n    var _b = locale.split('@')[0],\n      actualLocale = _b === void 0 ? '' : _b;\n    return normalizeLocale(actualLocale);\n  }\n  // If there's a dash (-) in the locale and it's not all lower case, it's already in the format of \"en-US\", so we return it\n  if (locale.indexOf('-') === -1 || !isAllLowerCase(locale)) {\n    return locale;\n  }\n  var _c = locale.split('-'),\n    splitEl1 = _c[0],\n    _d = _c[1],\n    splitEl2 = _d === void 0 ? '' : _d;\n  return \"\".concat(splitEl1, \"-\").concat(splitEl2.toUpperCase());\n}\nfunction getUserLocalesInternal(_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.useFallbackLocale,\n    useFallbackLocale = _c === void 0 ? true : _c,\n    _d = _b.fallbackLocale,\n    fallbackLocale = _d === void 0 ? 'en-US' : _d;\n  var languageList = [];\n  if (typeof navigator !== 'undefined') {\n    var rawLanguages = navigator.languages || [];\n    var languages = [];\n    for (var _i = 0, rawLanguages_1 = rawLanguages; _i < rawLanguages_1.length; _i++) {\n      var rawLanguagesItem = rawLanguages_1[_i];\n      languages = languages.concat(fixCommas(rawLanguagesItem));\n    }\n    var rawLanguage = navigator.language;\n    var language = rawLanguage ? fixCommas(rawLanguage) : rawLanguage;\n    languageList = languageList.concat(languages, language);\n  }\n  if (useFallbackLocale) {\n    languageList.push(fallbackLocale);\n  }\n  return languageList.filter(isString).map(normalizeLocale).filter(isUnique);\n}\nexport var getUserLocales = mem(getUserLocalesInternal, {\n  cacheKey: JSON.stringify\n});\nfunction getUserLocaleInternal(options) {\n  return getUserLocales(options)[0] || null;\n}\nexport var getUserLocale = mem(getUserLocaleInternal, {\n  cacheKey: JSON.stringify\n});\nexport default getUserLocale;","map":null,"metadata":{},"sourceType":"module"}