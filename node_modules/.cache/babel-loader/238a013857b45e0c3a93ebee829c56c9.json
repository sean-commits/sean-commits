{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getMonthStart, getMonthEnd } from '@wojtekmaj/date-utils';\nimport Tile from '../Tile.js';\nimport { formatMonth as defaultFormatMonth, formatMonthYear as defaultFormatMonthYear } from '../shared/dateFormatter.js';\nvar className = 'react-calendar__year-view__months__month';\nexport default function Month(_a) {\n  var _b = _a.classes,\n    classes = _b === void 0 ? [] : _b,\n    _c = _a.formatMonth,\n    formatMonth = _c === void 0 ? defaultFormatMonth : _c,\n    _d = _a.formatMonthYear,\n    formatMonthYear = _d === void 0 ? defaultFormatMonthYear : _d,\n    otherProps = __rest(_a, [\"classes\", \"formatMonth\", \"formatMonthYear\"]);\n  var date = otherProps.date,\n    locale = otherProps.locale;\n  return _jsx(Tile, __assign({}, otherProps, {\n    classes: __spreadArray(__spreadArray([], classes, true), [className], false),\n    formatAbbr: formatMonthYear,\n    maxDateTransform: getMonthEnd,\n    minDateTransform: getMonthStart,\n    view: \"year\",\n    children: formatMonth(locale, date)\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}