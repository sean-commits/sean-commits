{"ast":null,"code":"'use client';\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { forwardRef, useCallback, useImperativeHandle, useState } from 'react';\nimport clsx from 'clsx';\nimport Navigation from './Calendar/Navigation.js';\nimport CenturyView from './CenturyView.js';\nimport DecadeView from './DecadeView.js';\nimport YearView from './YearView.js';\nimport MonthView from './MonthView.js';\nimport { getBegin, getBeginNext, getEnd, getValueRange } from './shared/dates.js';\nimport { between } from './shared/utils.js';\nvar baseClassName = 'react-calendar';\nvar allViews = ['century', 'decade', 'year', 'month'];\nvar allValueTypes = ['decade', 'year', 'month', 'day'];\nvar defaultMinDate = new Date();\ndefaultMinDate.setFullYear(1, 0, 1);\ndefaultMinDate.setHours(0, 0, 0, 0);\nvar defaultMaxDate = new Date(8.64e15);\nfunction toDate(value) {\n  if (value instanceof Date) {\n    return value;\n  }\n  return new Date(value);\n}\n/**\n * Returns views array with disallowed values cut off.\n */\nfunction getLimitedViews(minDetail, maxDetail) {\n  return allViews.slice(allViews.indexOf(minDetail), allViews.indexOf(maxDetail) + 1);\n}\n/**\n * Determines whether a given view is allowed with currently applied settings.\n */\nfunction isViewAllowed(view, minDetail, maxDetail) {\n  var views = getLimitedViews(minDetail, maxDetail);\n  return views.indexOf(view) !== -1;\n}\n/**\n * Gets either provided view if allowed by minDetail and maxDetail, or gets\n * the default view if not allowed.\n */\nfunction getView(view, minDetail, maxDetail) {\n  if (!view) {\n    return maxDetail;\n  }\n  if (isViewAllowed(view, minDetail, maxDetail)) {\n    return view;\n  }\n  return maxDetail;\n}\n/**\n * Returns value type that can be returned with currently applied settings.\n */\nfunction getValueType(view) {\n  var index = allViews.indexOf(view);\n  return allValueTypes[index];\n}\nfunction getValue(value, index) {\n  var rawValue = Array.isArray(value) ? value[index] : value;\n  if (!rawValue) {\n    return null;\n  }\n  var valueDate = toDate(rawValue);\n  if (Number.isNaN(valueDate.getTime())) {\n    throw new Error(\"Invalid date: \".concat(value));\n  }\n  return valueDate;\n}\nfunction getDetailValue(_a, index) {\n  var value = _a.value,\n    minDate = _a.minDate,\n    maxDate = _a.maxDate,\n    maxDetail = _a.maxDetail;\n  var valuePiece = getValue(value, index);\n  if (!valuePiece) {\n    return null;\n  }\n  var valueType = getValueType(maxDetail);\n  var detailValueFrom = function () {\n    switch (index) {\n      case 0:\n        return getBegin(valueType, valuePiece);\n      case 1:\n        return getEnd(valueType, valuePiece);\n      default:\n        throw new Error(\"Invalid index value: \".concat(index));\n    }\n  }();\n  return between(detailValueFrom, minDate, maxDate);\n}\nvar getDetailValueFrom = function (args) {\n  return getDetailValue(args, 0);\n};\nvar getDetailValueTo = function (args) {\n  return getDetailValue(args, 1);\n};\nvar getDetailValueArray = function (args) {\n  return [getDetailValueFrom, getDetailValueTo].map(function (fn) {\n    return fn(args);\n  });\n};\nfunction getActiveStartDate(_a) {\n  var maxDate = _a.maxDate,\n    maxDetail = _a.maxDetail,\n    minDate = _a.minDate,\n    minDetail = _a.minDetail,\n    value = _a.value,\n    view = _a.view;\n  var rangeType = getView(view, minDetail, maxDetail);\n  var valueFrom = getDetailValueFrom({\n    value: value,\n    minDate: minDate,\n    maxDate: maxDate,\n    maxDetail: maxDetail\n  }) || new Date();\n  return getBegin(rangeType, valueFrom);\n}\nfunction getInitialActiveStartDate(_a) {\n  var activeStartDate = _a.activeStartDate,\n    defaultActiveStartDate = _a.defaultActiveStartDate,\n    defaultValue = _a.defaultValue,\n    defaultView = _a.defaultView,\n    maxDate = _a.maxDate,\n    maxDetail = _a.maxDetail,\n    minDate = _a.minDate,\n    minDetail = _a.minDetail,\n    value = _a.value,\n    view = _a.view;\n  var rangeType = getView(view, minDetail, maxDetail);\n  var valueFrom = activeStartDate || defaultActiveStartDate;\n  if (valueFrom) {\n    return getBegin(rangeType, valueFrom);\n  }\n  return getActiveStartDate({\n    maxDate: maxDate,\n    maxDetail: maxDetail,\n    minDate: minDate,\n    minDetail: minDetail,\n    value: value || defaultValue,\n    view: view || defaultView\n  });\n}\nfunction getIsSingleValue(value) {\n  return value && (!Array.isArray(value) || value.length === 1);\n}\nfunction areDatesEqual(date1, date2) {\n  return date1 instanceof Date && date2 instanceof Date && date1.getTime() === date2.getTime();\n}\nvar Calendar = forwardRef(function Calendar(props, ref) {\n  var activeStartDateProps = props.activeStartDate,\n    allowPartialRange = props.allowPartialRange,\n    calendarType = props.calendarType,\n    className = props.className,\n    defaultActiveStartDate = props.defaultActiveStartDate,\n    defaultValue = props.defaultValue,\n    defaultView = props.defaultView,\n    formatDay = props.formatDay,\n    formatLongDate = props.formatLongDate,\n    formatMonth = props.formatMonth,\n    formatMonthYear = props.formatMonthYear,\n    formatShortWeekday = props.formatShortWeekday,\n    formatWeekday = props.formatWeekday,\n    formatYear = props.formatYear,\n    _a = props.goToRangeStartOnSelect,\n    goToRangeStartOnSelect = _a === void 0 ? true : _a,\n    inputRef = props.inputRef,\n    locale = props.locale,\n    _b = props.maxDate,\n    maxDate = _b === void 0 ? defaultMaxDate : _b,\n    _c = props.maxDetail,\n    maxDetail = _c === void 0 ? 'month' : _c,\n    _d = props.minDate,\n    minDate = _d === void 0 ? defaultMinDate : _d,\n    _e = props.minDetail,\n    minDetail = _e === void 0 ? 'century' : _e,\n    navigationAriaLabel = props.navigationAriaLabel,\n    navigationAriaLive = props.navigationAriaLive,\n    navigationLabel = props.navigationLabel,\n    next2AriaLabel = props.next2AriaLabel,\n    next2Label = props.next2Label,\n    nextAriaLabel = props.nextAriaLabel,\n    nextLabel = props.nextLabel,\n    onActiveStartDateChange = props.onActiveStartDateChange,\n    onChangeProps = props.onChange,\n    onClickDay = props.onClickDay,\n    onClickDecade = props.onClickDecade,\n    onClickMonth = props.onClickMonth,\n    onClickWeekNumber = props.onClickWeekNumber,\n    onClickYear = props.onClickYear,\n    onDrillDown = props.onDrillDown,\n    onDrillUp = props.onDrillUp,\n    onViewChange = props.onViewChange,\n    prev2AriaLabel = props.prev2AriaLabel,\n    prev2Label = props.prev2Label,\n    prevAriaLabel = props.prevAriaLabel,\n    prevLabel = props.prevLabel,\n    _f = props.returnValue,\n    returnValue = _f === void 0 ? 'start' : _f,\n    selectRange = props.selectRange,\n    showDoubleView = props.showDoubleView,\n    showFixedNumberOfWeeks = props.showFixedNumberOfWeeks,\n    _g = props.showNavigation,\n    showNavigation = _g === void 0 ? true : _g,\n    showNeighboringCentury = props.showNeighboringCentury,\n    showNeighboringDecade = props.showNeighboringDecade,\n    _h = props.showNeighboringMonth,\n    showNeighboringMonth = _h === void 0 ? true : _h,\n    showWeekNumbers = props.showWeekNumbers,\n    tileClassName = props.tileClassName,\n    tileContent = props.tileContent,\n    tileDisabled = props.tileDisabled,\n    valueProps = props.value,\n    viewProps = props.view;\n  var _j = useState(defaultActiveStartDate),\n    activeStartDateState = _j[0],\n    setActiveStartDateState = _j[1];\n  var _k = useState(null),\n    hoverState = _k[0],\n    setHoverState = _k[1];\n  var _l = useState(Array.isArray(defaultValue) ? defaultValue.map(function (el) {\n      return el !== null ? toDate(el) : null;\n    }) : defaultValue !== null && defaultValue !== undefined ? toDate(defaultValue) : null),\n    valueState = _l[0],\n    setValueState = _l[1];\n  var _m = useState(defaultView),\n    viewState = _m[0],\n    setViewState = _m[1];\n  var activeStartDate = activeStartDateProps || activeStartDateState || getInitialActiveStartDate({\n    activeStartDate: activeStartDateProps,\n    defaultActiveStartDate: defaultActiveStartDate,\n    defaultValue: defaultValue,\n    defaultView: defaultView,\n    maxDate: maxDate,\n    maxDetail: maxDetail,\n    minDate: minDate,\n    minDetail: minDetail,\n    value: valueProps,\n    view: viewProps\n  });\n  var value = function () {\n    var rawValue = function () {\n      // In the middle of range selection, use value from state\n      if (selectRange && getIsSingleValue(valueState)) {\n        return valueState;\n      }\n      return valueProps !== undefined ? valueProps : valueState;\n    }();\n    if (!rawValue) {\n      return null;\n    }\n    return Array.isArray(rawValue) ? rawValue.map(function (el) {\n      return el !== null ? toDate(el) : null;\n    }) : rawValue !== null ? toDate(rawValue) : null;\n  }();\n  var valueType = getValueType(maxDetail);\n  var view = getView(viewProps || viewState, minDetail, maxDetail);\n  var views = getLimitedViews(minDetail, maxDetail);\n  var hover = selectRange ? hoverState : null;\n  var drillDownAvailable = views.indexOf(view) < views.length - 1;\n  var drillUpAvailable = views.indexOf(view) > 0;\n  var getProcessedValue = useCallback(function (value) {\n    var processFunction = function () {\n      switch (returnValue) {\n        case 'start':\n          return getDetailValueFrom;\n        case 'end':\n          return getDetailValueTo;\n        case 'range':\n          return getDetailValueArray;\n        default:\n          throw new Error('Invalid returnValue.');\n      }\n    }();\n    return processFunction({\n      maxDate: maxDate,\n      maxDetail: maxDetail,\n      minDate: minDate,\n      value: value\n    });\n  }, [maxDate, maxDetail, minDate, returnValue]);\n  var setActiveStartDate = useCallback(function (nextActiveStartDate, action) {\n    setActiveStartDateState(nextActiveStartDate);\n    var args = {\n      action: action,\n      activeStartDate: nextActiveStartDate,\n      value: value,\n      view: view\n    };\n    if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {\n      onActiveStartDateChange(args);\n    }\n  }, [activeStartDate, onActiveStartDateChange, value, view]);\n  var onClickTile = useCallback(function (value, event) {\n    var callback = function () {\n      switch (view) {\n        case 'century':\n          return onClickDecade;\n        case 'decade':\n          return onClickYear;\n        case 'year':\n          return onClickMonth;\n        case 'month':\n          return onClickDay;\n        default:\n          throw new Error(\"Invalid view: \".concat(view, \".\"));\n      }\n    }();\n    if (callback) callback(value, event);\n  }, [onClickDay, onClickDecade, onClickMonth, onClickYear, view]);\n  var drillDown = useCallback(function (nextActiveStartDate, event) {\n    if (!drillDownAvailable) {\n      return;\n    }\n    onClickTile(nextActiveStartDate, event);\n    var nextView = views[views.indexOf(view) + 1];\n    if (!nextView) {\n      throw new Error('Attempted to drill down from the lowest view.');\n    }\n    setActiveStartDateState(nextActiveStartDate);\n    setViewState(nextView);\n    var args = {\n      action: 'drillDown',\n      activeStartDate: nextActiveStartDate,\n      value: value,\n      view: nextView\n    };\n    if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {\n      onActiveStartDateChange(args);\n    }\n    if (onViewChange && view !== nextView) {\n      onViewChange(args);\n    }\n    if (onDrillDown) {\n      onDrillDown(args);\n    }\n  }, [activeStartDate, drillDownAvailable, onActiveStartDateChange, onClickTile, onDrillDown, onViewChange, value, view, views]);\n  var drillUp = useCallback(function () {\n    if (!drillUpAvailable) {\n      return;\n    }\n    var nextView = views[views.indexOf(view) - 1];\n    if (!nextView) {\n      throw new Error('Attempted to drill up from the highest view.');\n    }\n    var nextActiveStartDate = getBegin(nextView, activeStartDate);\n    setActiveStartDateState(nextActiveStartDate);\n    setViewState(nextView);\n    var args = {\n      action: 'drillUp',\n      activeStartDate: nextActiveStartDate,\n      value: value,\n      view: nextView\n    };\n    if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {\n      onActiveStartDateChange(args);\n    }\n    if (onViewChange && view !== nextView) {\n      onViewChange(args);\n    }\n    if (onDrillUp) {\n      onDrillUp(args);\n    }\n  }, [activeStartDate, drillUpAvailable, onActiveStartDateChange, onDrillUp, onViewChange, value, view, views]);\n  var onChange = useCallback(function (rawNextValue, event) {\n    var previousValue = value;\n    onClickTile(rawNextValue, event);\n    var isFirstValueInRange = selectRange && !getIsSingleValue(previousValue);\n    var nextValue;\n    if (selectRange) {\n      // Range selection turned on\n      if (isFirstValueInRange) {\n        // Value has 0 or 2 elements - either way we're starting a new array\n        // First value\n        nextValue = getBegin(valueType, rawNextValue);\n      } else {\n        if (!previousValue) {\n          throw new Error('previousValue is required');\n        }\n        if (Array.isArray(previousValue)) {\n          throw new Error('previousValue must not be an array');\n        }\n        // Second value\n        nextValue = getValueRange(valueType, previousValue, rawNextValue);\n      }\n    } else {\n      // Range selection turned off\n      nextValue = getProcessedValue(rawNextValue);\n    }\n    var nextActiveStartDate =\n    // Range selection turned off\n    !selectRange ||\n    // Range selection turned on, first value\n    isFirstValueInRange ||\n    // Range selection turned on, second value, goToRangeStartOnSelect toggled on\n    goToRangeStartOnSelect ? getActiveStartDate({\n      maxDate: maxDate,\n      maxDetail: maxDetail,\n      minDate: minDate,\n      minDetail: minDetail,\n      value: nextValue,\n      view: view\n    }) : null;\n    event.persist();\n    setActiveStartDateState(nextActiveStartDate);\n    setValueState(nextValue);\n    var args = {\n      action: 'onChange',\n      activeStartDate: nextActiveStartDate,\n      value: nextValue,\n      view: view\n    };\n    if (onActiveStartDateChange && !areDatesEqual(activeStartDate, nextActiveStartDate)) {\n      onActiveStartDateChange(args);\n    }\n    if (onChangeProps) {\n      if (selectRange) {\n        var isSingleValue = getIsSingleValue(nextValue);\n        if (!isSingleValue) {\n          onChangeProps(nextValue || null, event);\n        } else if (allowPartialRange) {\n          if (Array.isArray(nextValue)) {\n            throw new Error('value must not be an array');\n          }\n          onChangeProps([nextValue || null, null], event);\n        }\n      } else {\n        onChangeProps(nextValue || null, event);\n      }\n    }\n  }, [activeStartDate, allowPartialRange, getProcessedValue, goToRangeStartOnSelect, maxDate, maxDetail, minDate, minDetail, onActiveStartDateChange, onChangeProps, onClickTile, selectRange, value, valueType, view]);\n  function onMouseOver(nextHover) {\n    setHoverState(nextHover);\n  }\n  function onMouseLeave() {\n    setHoverState(null);\n  }\n  useImperativeHandle(ref, function () {\n    return {\n      activeStartDate: activeStartDate,\n      drillDown: drillDown,\n      drillUp: drillUp,\n      onChange: onChange,\n      setActiveStartDate: setActiveStartDate,\n      value: value,\n      view: view\n    };\n  }, [activeStartDate, drillDown, drillUp, onChange, setActiveStartDate, value, view]);\n  function renderContent(next) {\n    var currentActiveStartDate = next ? getBeginNext(view, activeStartDate) : getBegin(view, activeStartDate);\n    var onClick = drillDownAvailable ? drillDown : onChange;\n    var commonProps = {\n      activeStartDate: currentActiveStartDate,\n      hover: hover,\n      locale: locale,\n      maxDate: maxDate,\n      minDate: minDate,\n      onClick: onClick,\n      onMouseOver: selectRange ? onMouseOver : undefined,\n      tileClassName: tileClassName,\n      tileContent: tileContent,\n      tileDisabled: tileDisabled,\n      value: value,\n      valueType: valueType\n    };\n    switch (view) {\n      case 'century':\n        {\n          return _jsx(CenturyView, __assign({\n            formatYear: formatYear,\n            showNeighboringCentury: showNeighboringCentury\n          }, commonProps));\n        }\n      case 'decade':\n        {\n          return _jsx(DecadeView, __assign({\n            formatYear: formatYear,\n            showNeighboringDecade: showNeighboringDecade\n          }, commonProps));\n        }\n      case 'year':\n        {\n          return _jsx(YearView, __assign({\n            formatMonth: formatMonth,\n            formatMonthYear: formatMonthYear\n          }, commonProps));\n        }\n      case 'month':\n        {\n          return _jsx(MonthView, __assign({\n            calendarType: calendarType,\n            formatDay: formatDay,\n            formatLongDate: formatLongDate,\n            formatShortWeekday: formatShortWeekday,\n            formatWeekday: formatWeekday,\n            onClickWeekNumber: onClickWeekNumber,\n            onMouseLeave: selectRange ? onMouseLeave : undefined,\n            showFixedNumberOfWeeks: typeof showFixedNumberOfWeeks !== 'undefined' ? showFixedNumberOfWeeks : showDoubleView,\n            showNeighboringMonth: showNeighboringMonth,\n            showWeekNumbers: showWeekNumbers\n          }, commonProps));\n        }\n      default:\n        throw new Error(\"Invalid view: \".concat(view, \".\"));\n    }\n  }\n  function renderNavigation() {\n    if (!showNavigation) {\n      return null;\n    }\n    return _jsx(Navigation, {\n      activeStartDate: activeStartDate,\n      drillUp: drillUp,\n      formatMonthYear: formatMonthYear,\n      formatYear: formatYear,\n      locale: locale,\n      maxDate: maxDate,\n      minDate: minDate,\n      navigationAriaLabel: navigationAriaLabel,\n      navigationAriaLive: navigationAriaLive,\n      navigationLabel: navigationLabel,\n      next2AriaLabel: next2AriaLabel,\n      next2Label: next2Label,\n      nextAriaLabel: nextAriaLabel,\n      nextLabel: nextLabel,\n      prev2AriaLabel: prev2AriaLabel,\n      prev2Label: prev2Label,\n      prevAriaLabel: prevAriaLabel,\n      prevLabel: prevLabel,\n      setActiveStartDate: setActiveStartDate,\n      showDoubleView: showDoubleView,\n      view: view,\n      views: views\n    });\n  }\n  var valueArray = Array.isArray(value) ? value : [value];\n  return _jsxs(\"div\", {\n    className: clsx(baseClassName, selectRange && valueArray.length === 1 && \"\".concat(baseClassName, \"--selectRange\"), showDoubleView && \"\".concat(baseClassName, \"--doubleView\"), className),\n    ref: inputRef,\n    children: [renderNavigation(), _jsxs(\"div\", {\n      className: \"\".concat(baseClassName, \"__viewContainer\"),\n      onBlur: selectRange ? onMouseLeave : undefined,\n      onMouseLeave: selectRange ? onMouseLeave : undefined,\n      children: [renderContent(), showDoubleView ? renderContent(true) : null]\n    })]\n  });\n});\nexport default Calendar;","map":null,"metadata":{},"sourceType":"module"}