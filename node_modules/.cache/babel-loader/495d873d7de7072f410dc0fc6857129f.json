{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport clsx from 'clsx';\nimport Days from './MonthView/Days.js';\nimport Weekdays from './MonthView/Weekdays.js';\nimport WeekNumbers from './MonthView/WeekNumbers.js';\nimport { CALENDAR_TYPES, CALENDAR_TYPE_LOCALES } from './shared/const.js';\nfunction getCalendarTypeFromLocale(locale) {\n  if (locale) {\n    for (var _i = 0, _a = Object.entries(CALENDAR_TYPE_LOCALES); _i < _a.length; _i++) {\n      var _b = _a[_i],\n        calendarType = _b[0],\n        locales = _b[1];\n      if (locales.includes(locale)) {\n        return calendarType;\n      }\n    }\n  }\n  return CALENDAR_TYPES.ISO_8601;\n}\n/**\n * Displays a given month.\n */\nexport default function MonthView(props) {\n  var activeStartDate = props.activeStartDate,\n    locale = props.locale,\n    onMouseLeave = props.onMouseLeave,\n    showFixedNumberOfWeeks = props.showFixedNumberOfWeeks;\n  var _a = props.calendarType,\n    calendarType = _a === void 0 ? getCalendarTypeFromLocale(locale) : _a,\n    formatShortWeekday = props.formatShortWeekday,\n    formatWeekday = props.formatWeekday,\n    onClickWeekNumber = props.onClickWeekNumber,\n    showWeekNumbers = props.showWeekNumbers,\n    childProps = __rest(props, [\"calendarType\", \"formatShortWeekday\", \"formatWeekday\", \"onClickWeekNumber\", \"showWeekNumbers\"]);\n  function renderWeekdays() {\n    return _jsx(Weekdays, {\n      calendarType: calendarType,\n      formatShortWeekday: formatShortWeekday,\n      formatWeekday: formatWeekday,\n      locale: locale,\n      onMouseLeave: onMouseLeave\n    });\n  }\n  function renderWeekNumbers() {\n    if (!showWeekNumbers) {\n      return null;\n    }\n    return _jsx(WeekNumbers, {\n      activeStartDate: activeStartDate,\n      calendarType: calendarType,\n      onClickWeekNumber: onClickWeekNumber,\n      onMouseLeave: onMouseLeave,\n      showFixedNumberOfWeeks: showFixedNumberOfWeeks\n    });\n  }\n  function renderDays() {\n    return _jsx(Days, __assign({\n      calendarType: calendarType\n    }, childProps));\n  }\n  var className = 'react-calendar__month-view';\n  return _jsx(\"div\", {\n    className: clsx(className, showWeekNumbers ? \"\".concat(className, \"--weekNumbers\") : ''),\n    children: _jsxs(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'flex-end'\n      },\n      children: [renderWeekNumbers(), _jsxs(\"div\", {\n        style: {\n          flexGrow: 1,\n          width: '100%'\n        },\n        children: [renderWeekdays(), renderDays()]\n      })]\n    })\n  });\n}","map":null,"metadata":{},"sourceType":"module"}